// backend/src/jobs/sessionDetectionJob.js

const scheduledSessionModel = require('../models/scheduledSessionModel');
const NotificationStatus = require('../models/notificationStatusModel');

/**
 * Job de detec√ß√£o autom√°tica de sess√µes realizadas
 * Implementa√ß√£o da Fase 1 - MVP do Sistema de Agendamento
 *
 * Este job verifica periodicamente se h√° sess√µes realizadas que correspondem
 * a agendamentos programados e os vincula automaticamente
 */

/**
 * Executa a detec√ß√£o autom√°tica de sess√µes realizadas
 * @param {Object} options - Op√ß√µes de configura√ß√£o
 * @param {boolean} options.sendNotifications - Se deve enviar notifica√ß√µes
 * @param {number} options.lookbackHours - Quantas horas olhar para tr√°s
 * @returns {Promise<Object>} Resultado da detec√ß√£o
 */
const detectAndLinkSessions = async (options = {}) => {
  const {
    sendNotifications = true,
    lookbackHours = 24
  } = options;

  try {
    console.log('[SESSION-DETECTION] Iniciando detec√ß√£o autom√°tica de sess√µes realizadas...');

    // Buscar agendamentos que podem ter sess√µes correspondentes
    const candidateAppointments = await scheduledSessionModel.findPendingDetection(lookbackHours);

    console.log(`[SESSION-DETECTION] Encontrados ${candidateAppointments.length} agendamentos candidatos para detec√ß√£o`);

    const results = {
      processed: 0,
      linked: 0,
      notifications_sent: 0,
      errors: []
    };

    for (const appointment of candidateAppointments) {
      try {
        results.processed++;

        // Tentar detectar e vincular sess√£o automaticamente
        const linkResult = await scheduledSessionModel.detectAndLinkSession(appointment.id);

        if (linkResult.success) {
          results.linked++;
          console.log(`[SESSION-DETECTION] Agendamento ID ${appointment.id} vinculado √† sess√£o ID ${linkResult.session_id}`);

          // Enviar notifica√ß√£o se solicitado
          if (sendNotifications && linkResult.session_id) {
            try {
              await sendSessionLinkedNotification(appointment, linkResult.session_id);
              results.notifications_sent++;
            } catch (notificationError) {
              console.error(`[SESSION-DETECTION] Erro ao enviar notifica√ß√£o para agendamento ID ${appointment.id}:`, notificationError.message);
              // N√£o falha o processo por erro de notifica√ß√£o
            }
          }
        } else {
          console.log(`[SESSION-DETECTION] Nenhuma sess√£o encontrada para agendamento ID ${appointment.id}: ${linkResult.reason}`);
        }

      } catch (appointmentError) {
        console.error(`[SESSION-DETECTION] Erro ao processar agendamento ID ${appointment.id}:`, appointmentError.message);
        results.errors.push({
          appointment_id: appointment.id,
          error: appointmentError.message
        });
      }
    }

    console.log(`[SESSION-DETECTION] Detec√ß√£o conclu√≠da. Processados: ${results.processed}, Vinculados: ${results.linked}, Notifica√ß√µes: ${results.notifications_sent}, Erros: ${results.errors.length}`);

    return results;

  } catch (error) {
    console.error('[SESSION-DETECTION] Erro geral na detec√ß√£o autom√°tica:', error);
    throw error;
  }
};

/**
 * Marca agendamentos vencidos como perdidos
 * @param {number} hoursAfter - Horas ap√≥s o agendamento para considerar perdido
 * @returns {Promise<Object>} Resultado da marca√ß√£o
 */
const markOverdueAppointments = async (hoursAfter = 2) => {
  try {
    console.log(`[SESSION-DETECTION] Iniciando marca√ß√£o de agendamentos perdidos (${hoursAfter}h ap√≥s agendamento)...`);

    const result = await scheduledSessionModel.markMissedAppointments(hoursAfter);

    console.log(`[SESSION-DETECTION] ${result.marked_count} agendamentos marcados como perdidos`);

    // Enviar notifica√ß√µes para agendamentos marcados como perdidos
    if (result.marked_appointments && result.marked_appointments.length > 0) {
      for (const appointment of result.marked_appointments) {
        try {
          await sendMissedAppointmentNotification(appointment);
        } catch (notificationError) {
          console.error(`[SESSION-DETECTION] Erro ao enviar notifica√ß√£o de agendamento perdido ID ${appointment.id}:`, notificationError.message);
        }
      }
    }

    return result;

  } catch (error) {
    console.error('[SESSION-DETECTION] Erro ao marcar agendamentos perdidos:', error);
    throw error;
  }
};

/**
 * Envia notifica√ß√£o quando uma sess√£o √© vinculada automaticamente
 * @param {Object} appointment - Dados do agendamento
 * @param {number} sessionId - ID da sess√£o vinculada
 */
const sendSessionLinkedNotification = async (appointment, sessionId) => {
  try {
    console.log(`[SESSION-DETECTION] üìß Notifica√ß√£o: Sess√£o ${sessionId} vinculada ao agendamento ${appointment.id} do paciente ${appointment.patient_name}`);

    // Implementa√ß√£o simplificada - apenas log por enquanto
    // Futura implementa√ß√£o pode usar WebSocket ou sistema de notifica√ß√µes

  } catch (error) {
    console.error('[SESSION-DETECTION] Erro ao enviar notifica√ß√£o de sess√£o vinculada:', error);
    throw error;
  }
};

/**
 * Envia notifica√ß√£o quando um agendamento √© marcado como perdido
 * @param {Object} appointment - Dados do agendamento perdido
 */
const sendMissedAppointmentNotification = async (appointment) => {
  try {
    console.log(`[SESSION-DETECTION] üìß Notifica√ß√£o: Agendamento ${appointment.id} do paciente ${appointment.patient_name} marcado como perdido`);

    // Implementa√ß√£o simplificada - apenas log por enquanto
    // Futura implementa√ß√£o pode usar WebSocket ou sistema de notifica√ß√µes

  } catch (error) {
    console.error('[SESSION-DETECTION] Erro ao enviar notifica√ß√£o de agendamento perdido:', error);
    throw error;
  }
};

/**
 * Executa rotina completa de manuten√ß√£o do sistema de agendamento
 * @param {Object} options - Op√ß√µes de configura√ß√£o
 * @returns {Promise<Object>} Resultado completo da rotina
 */
const runMaintenanceRoutine = async (options = {}) => {
  const {
    detectSessions = true,
    markMissed = true,
    sendNotifications = true,
    lookbackHours = 24,
    missedAfterHours = 2
  } = options;

  console.log('[SESSION-DETECTION] Iniciando rotina de manuten√ß√£o do sistema de agendamento...');

  const results = {
    detection: null,
    missed_marking: null,
    started_at: new Date(),
    completed_at: null,
    total_duration_ms: 0
  };

  try {
    // 1. Detec√ß√£o autom√°tica de sess√µes
    if (detectSessions) {
      console.log('[SESSION-DETECTION] Executando detec√ß√£o autom√°tica de sess√µes...');
      results.detection = await detectAndLinkSessions({
        sendNotifications,
        lookbackHours
      });
    }

    // 2. Marca√ß√£o de agendamentos perdidos
    if (markMissed) {
      console.log('[SESSION-DETECTION] Executando marca√ß√£o de agendamentos perdidos...');
      results.missed_marking = await markOverdueAppointments(missedAfterHours);
    }

    results.completed_at = new Date();
    results.total_duration_ms = results.completed_at - results.started_at;

    console.log(`[SESSION-DETECTION] Rotina de manuten√ß√£o conclu√≠da em ${results.total_duration_ms}ms`);

    return results;

  } catch (error) {
    results.completed_at = new Date();
    results.total_duration_ms = results.completed_at - results.started_at;
    results.error = error.message;

    console.error('[SESSION-DETECTION] Erro na rotina de manuten√ß√£o:', error);
    throw error;
  }
};

/**
 * Inicia o agendamento autom√°tico do job (para uso em produ√ß√£o)
 * @param {Object} config - Configura√ß√£o do agendamento
 */
const scheduleMaintenanceJob = (config = {}) => {
  const {
    intervalMinutes = 30, // A cada 30 minutos por padr√£o
    detectSessions = true,
    markMissed = true,
    sendNotifications = true,
    lookbackHours = 24,
    missedAfterHours = 2
  } = config;

  console.log(`[SESSION-DETECTION] Agendando job de manuten√ß√£o para execu√ß√£o a cada ${intervalMinutes} minutos`);

  const intervalMs = intervalMinutes * 60 * 1000;

  setInterval(async () => {
    try {
      await runMaintenanceRoutine({
        detectSessions,
        markMissed,
        sendNotifications,
        lookbackHours,
        missedAfterHours
      });
    } catch (error) {
      console.error('[SESSION-DETECTION] Erro na execu√ß√£o agendada do job:', error);
    }
  }, intervalMs);

  // Executar uma vez imediatamente
  setTimeout(async () => {
    try {
      console.log('[SESSION-DETECTION] Executando rotina inicial...');
      await runMaintenanceRoutine({
        detectSessions,
        markMissed,
        sendNotifications,
        lookbackHours,
        missedAfterHours
      });
    } catch (error) {
      console.error('[SESSION-DETECTION] Erro na execu√ß√£o inicial do job:', error);
    }
  }, 5000); // 5 segundos ap√≥s o in√≠cio
};

module.exports = {
  detectAndLinkSessions,
  markOverdueAppointments,
  runMaintenanceRoutine,
  scheduleMaintenanceJob
};