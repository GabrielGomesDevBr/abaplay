/**
 * Script para limpeza de cache relacionado aos prompt levels
 * Execute no console do navegador se houver problemas persistentes
 */

console.log('üßπ Iniciando limpeza de cache ABAplay...');

// 1. Limpar localStorage espec√≠fico
const keysToRemove = [];
for (let i = 0; i < localStorage.length; i++) {
  const key = localStorage.key(i);
  if (key && (key.includes('promptLevel') || key.includes('prompt_level'))) {
    keysToRemove.push(key);
  }
}

keysToRemove.forEach(key => {
  localStorage.removeItem(key);
  console.log(`‚ùå Removido do localStorage: ${key}`);
});

// 2. Limpar sessionStorage
sessionStorage.clear();
console.log('‚ùå sessionStorage limpo');

// 3. Limpar indexedDB relacionado
if ('indexedDB' in window) {
  try {
    // Tentar deletar poss√≠veis bancos de dados do cache
    const dbNames = ['abaplay-cache', 'prompt-levels-cache', 'abaplay-prompt-cache'];
    dbNames.forEach(dbName => {
      const deleteReq = indexedDB.deleteDatabase(dbName);
      deleteReq.onsuccess = () => console.log(`‚ùå IndexedDB '${dbName}' removido`);
      deleteReq.onerror = () => console.log(`‚ö†Ô∏è  IndexedDB '${dbName}' n√£o encontrado ou j√° removido`);
    });
  } catch (error) {
    console.log('‚ö†Ô∏è  Erro ao limpar IndexedDB:', error);
  }
}

// 4. Limpar cache do service worker se existir
if ('serviceWorker' in navigator) {
  navigator.serviceWorker.getRegistrations().then(registrations => {
    registrations.forEach(registration => {
      registration.unregister();
      console.log('‚ùå Service Worker desregistrado');
    });
  });
}

// 5. For√ßar reload para garantir limpeza
console.log('üîÑ For√ßando reload da p√°gina...');
setTimeout(() => {
  window.location.reload(true);
}, 1000);

console.log('‚úÖ Limpeza de cache conclu√≠da! A p√°gina ser√° recarregada.');